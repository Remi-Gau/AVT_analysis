# --------------------------------------------------- #
#					           QUAERO							   #
# --------------------------------------------------- #
#include_once "C:\\Users\\Rémi\\Dropbox\\PhD\\Experiments\\MVPA_A_V_T\\stimlibrel.pcl"
#include_once "C:\\Users\\Rémi\\Dropbox\\PhD\\Experiments\\MVPA_A_V_T\\subroutines_tactile.pcl"

#include_once "U:\\A_V_T\\stimlibrel.pcl"

#loadLibrary();

#Stimulator licence BHAM
#initStimulator("8DD8J3C662984KL65UZ3LHJEEF5OTP");	
int SlotL=2;
int SlotR=3;

#Stimulator licence MPI CBS
#initStimulator("0348778LCCA6UL97STQMQNYFEAMIOU");	
#int SlotL=3;
#int SlotR=4;

#setProperty("local_buffer_size", 5000000);

#setDAC(0, 0);												# DAC 0 auf Pins "eingefahren" setzen
#setDAC(1, 4095);											# DAC 1 auf Pins "ausgefahren" setzen


# --------------------------------------------------- #
#					           PCL									#
# --------------------------------------------------- #
string DATE = date_time( "yyyy_mm_dd_hhnn" );

# DISPLAY
double RefreshRate = 60.0;

#Compute the number of pixel per degree
int MaxFOV = 34;  #2.0 * 180.0 * arctan(MonitorWidth/2.0/ViewDist)/ Pi; 
int Win_H = 768 ; 
int Win_W = 1024 ; 
int PPD = Win_W/MaxFOV;

# for ViewDist = 30
# MonWidth	MaxFOV
# 48.0		77
# 37			63
# 29			52
# 21.5		40

# for ViewDist = 50
# MonWidth	MaxFOV
# 48.0		51

# for ViewDist = 60
# MonWidth	MaxFOV
# 33.0		31
# 37			34

# for ViewDist = 160
# MonWidth	MaxFOV
# 39.0		40


# STIMULI & TRIALS
array <int> PresentationLocationsDeg[15]= {-12, -10, -8, -5, -4, -3, -1, 0, 1, 3, 4, 5, 8, 10, 12};


# Visual
array <int> PresentationLocationsPix[0];
loop
int LocationIndex = 1;
until LocationIndex > PresentationLocationsDeg.count()
begin
	PresentationLocationsPix.add( PresentationLocationsDeg[LocationIndex] * PPD);
	LocationIndex = LocationIndex + 1;
end;




# --------------------------------------------------- #
#                USER INPUT REQUIRED                  #
# --------------------------------------------------- #
preset bool DEBUG = false;

preset int Stimulus_Duration = 50; # ms
int Post_Stimulus_Duration = 250;
int Pre_Stimulus_Duration = 500;

Dots_V.set_duration(Stimulus_Duration);
PostStimFix_V.set_time(Pre_Stimulus_Duration+Stimulus_Duration);

PostStimFix_A.set_duration(Post_Stimulus_Duration+Stimulus_Duration);

Dot_Target_1.set_duration(Stimulus_Duration);
Inter_Dot.set_duration(40);
Inter_Dot.set_delta_time(Stimulus_Duration);
Dot_Target_2.set_duration(Stimulus_Duration);
Dot_Target_2.set_delta_time(40);
PostStimFix_V_Target.set_time(Pre_Stimulus_Duration+2*Stimulus_Duration+40);
PostStimFix_V_Target.set_duration(Post_Stimulus_Duration+Stimulus_Duration);

Sound_Target2.set_time(Pre_Stimulus_Duration+Stimulus_Duration+40);
PostStimFix_A_Target.set_duration(3*Stimulus_Duration+Post_Stimulus_Duration);

preset int SubjectNumber;

preset int RunNumber;

RunNumber = 3000 + RunNumber;

# Tactile
# tactile stim duration = 0.5*WaitTime*2*NumCycle [in ms]
# stim freq = 1/(0.5*WaitTime*2/1000)
double Tactile_Stimulus_Duration = 50.0; # ms
int NumCycle = 5;
int WaitTime = 10;
int NumCycleTarget=5; 
int IntervalTime=50;

if Stimulus_Duration == 50 then
	Tactile_Stimulus_Duration = 50.0; # ms
	NumCycle = 5;
	WaitTime = 10;
	NumCycleTarget=5; 
	IntervalTime=50;

elseif Stimulus_Duration == 80 then
	Tactile_Stimulus_Duration = 80.0; # ms
	NumCycle = 8;
	WaitTime = 10;
	NumCycleTarget=8; 
	IntervalTime=80;		
	
elseif Stimulus_Duration == 100 then
	Tactile_Stimulus_Duration = 100.0; # ms
	NumCycle = 10;
	WaitTime = 10;
	NumCycleTarget=10; 
	IntervalTime=100;
	
else
	Tactile_Stimulus_Duration = 200.0; # ms
	NumCycle = 20;
	WaitTime = 10;
	NumCycleTarget=20; 
	IntervalTime=200;
	
end;

# --------------------------------------------------- #
#                USER INPUT REQUIRED                  #
# --------------------------------------------------- #
string Text2Present = "This is ";

Text2Present.append("an fMRI run ");

if DEBUG == true then
	Text2Present.append("in DEBUG mode.\n\n");
else
	Text2Present.append("not in DEBUG mode.\n\n");
end;

Text2Present.append("Audio or Visual or Tactile trials ");	

ConfirmationTxt.set_caption(Text2Present);
ConfirmationTxt.redraw();
Confirmation.present();


if DEBUG == true then # Psychophysics run or debug
	Final_Fixation.set_duration(1000);
	Fixation.set_duration(3000);
end;


# --------------------------------------------------- #
#                GETTING TRIALS LIST                  #
# --------------------------------------------------- #
array <int> TrialList[0];
array<int> Locations[0];

if DEBUG == true then
	
	# TRIAL LIST
	
	# Fixation ; TrialType == 0

	# AudioOnly_Trial ; TrialType == 1
	# VisualOnly_Trial ; TrialType == 2
	# Tactile_Trial ; TrialType == 5
	
	# AudioOnly_Target ; TrialType == 6
	# VisualOnly_Target ; TrialType == 7
	# Tactile_Target ; TrialType == 8
	
	TrialList.assign ({1, 1, 1, 1, 2, 2, 2, 2, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8});
	TrialList.assign ({2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7});
	
	# LOCATION LIST
	Locations.assign({5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11});

	#TrialList.assign ({5, 8, 5, 8, 5, 8, 5, 8});
	Locations.assign({5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11});


	#logfile.set_filename("debug.log");
	
else
	# Change directory where to save log files to and to read trial list from
	string SubjectDirectory = "\Subject_";
	SubjectDirectory.append(string(SubjectNumber));
	SubjectDirectory.append("\\");
	logfile_directory.append(SubjectDirectory);

	term.print(logfile_directory);
	term.print("\n");
	
	
	# Set name for file containing the trial list
	string TrialListFileName = logfile_directory;
	TrialListFileName.append("Trial_List_Subject_");
	TrialListFileName.append(string(SubjectNumber));
	TrialListFileName.append("_Run_");
	TrialListFileName.append(string(RunNumber));
	TrialListFileName.append(".txt");
	
	term.print(TrialListFileName);
	term.print("\n");
	
	
	# Set name for file containing the side list
	string SideListFileName = logfile_directory;
	SideListFileName.append("Side_List_Subject_");
	SideListFileName.append(string(SubjectNumber));
	SideListFileName.append("_Run_");
	SideListFileName.append(string(RunNumber));
	SideListFileName.append(".txt");
	
	term.print(SideListFileName);
	term.print("\n");
	
	
	# Set name for logfile for this subject and run
	string LogFileName = logfile_directory;
	LogFileName.append("Logfile_Subject_");
	LogFileName.append(string(SubjectNumber));
	LogFileName.append("_Run_");
	LogFileName.append(string(RunNumber));
	LogFileName.append("_");
	LogFileName.append(DATE);
	LogFileName.append(".txt");
	logfile.set_filename(LogFileName);
		
	term.print(LogFileName);
	term.print("\n");
	
	
	# Read trial and side list from files
	input_file StimOrderFile = new input_file;
	StimOrderFile.open( TrialListFileName );
	
	input_file SideOrderFile = new input_file;
	SideOrderFile.open( SideListFileName );
	
	bool CouldRead1 = true;
	bool EOF1 = false;
	
	bool CouldRead2 = true;
	bool EOF2 = false;
	
	loop
		
		int Index=1;
		
		int CurrentTrial1;
		double CurrentTargetParam1;
		string TEMP1;
		
		int CurrentTrial2;
		double CurrentTargetParam2;
		string TEMP2;
		
	until EOF1==true || EOF2==true 
	begin
		TEMP1 = StimOrderFile.get_line( );
		TEMP2 = SideOrderFile.get_line( );
		
		CurrentTrial1 = int(double(TEMP1));
		TrialList.add(CurrentTrial1);
		
		CurrentTrial2 = int(double(TEMP2));
		Locations.add(CurrentTrial2);
		
		CouldRead1 = StimOrderFile.last_succeeded( );
		EOF1 = StimOrderFile.end_of_file( );
		
		CouldRead2 = SideOrderFile.last_succeeded( );
		EOF2 = SideOrderFile.end_of_file( );
		
		if CouldRead1==false || CouldRead2==false then
			exit( "There was a problem while reading the trial list." );
		end;
		
		Index = Index + 1;
		
	end;
	
	StimOrderFile.close();
	SideOrderFile.close();
	
end;



# ------------------------------------------------------ #
#					           START									#
# ------------------------------------------------------ #
PictureBlueFixationCross.present();

EPI.present();

Start_Trial.set_mri_pulse(1);
Start_Trial.present();


# ------------------------------------------------------ #
#					          MAIN LOOP 							   #
# ------------------------------------------------------ #
loop 

	int TrialIndex = 1;
	int TrialType;
	
	#  Trial parameters
	int Trial_Vis_Loc;
	int Trial_Aud_Loc;

until TrialIndex > TrialList.count()

begin
	
	# AudioOnly_Trial ; TrialType == 1
	# VisualOnly_Trial ; TrialType == 2
	# Tactile_Trial ; TrialType == 5
	
	# AudioOnly_Target ; TrialType == 6
	# VisualOnly_Target ; TrialType == 7
	# Tactile_Target ; TrialType == 8

	TrialType = TrialList[TrialIndex];
	
	# TRIAL IS A FIXATION
	if TrialType == 0 then
		Fixation.present();
		
	# TRIAL IS AN ACTUAL EVENT
	else		
		
		# Audio
		if TrialType==1 || TrialType==6 then
			# Determine the location of this trial
			Trial_Aud_Loc = Locations[TrialIndex]+15*random(0, 9);
			
			# Change the sound
			if TrialType==1 then
				if Stimulus_Duration == 50 then
					SoundOnly.set_stimulus(SOUNDS50[Trial_Aud_Loc]);
				elseif Stimulus_Duration == 80 then
					SoundOnly.set_stimulus(SOUNDS80[Trial_Aud_Loc]);					
				elseif Stimulus_Duration == 100 then
					SoundOnly.set_stimulus(SOUNDS100[Trial_Aud_Loc]);
				else
					SoundOnly.set_stimulus(SOUNDS200[Trial_Aud_Loc]);
				end
				
			elseif TrialType==6 then
				if Stimulus_Duration == 50 then
					Sound_Target1.set_stimulus(SOUNDS50[Trial_Aud_Loc]);
					Sound_Target2.set_stimulus(SOUNDS50[Trial_Aud_Loc]);					
				elseif Stimulus_Duration == 80 then
					Sound_Target1.set_stimulus(SOUNDS80[Trial_Aud_Loc]);		
					Sound_Target2.set_stimulus(SOUNDS80[Trial_Aud_Loc]);	
				elseif Stimulus_Duration == 100 then
					Sound_Target1.set_stimulus(SOUNDS100[Trial_Aud_Loc]);
					Sound_Target2.set_stimulus(SOUNDS100[Trial_Aud_Loc]);					
				else
					Sound_Target1.set_stimulus(SOUNDS200[Trial_Aud_Loc]);
					Sound_Target2.set_stimulus(SOUNDS200[Trial_Aud_Loc]);					
				end	
			end;
		end;
		
		# Visual
		if TrialType==2 || TrialType==7 then
			# Determine the location of this trial
			if TrialType==4 then
				Trial_Vis_Loc = -1*PresentationLocationsPix[Locations[TrialIndex]];
			else
				Trial_Vis_Loc = PresentationLocationsPix[Locations[TrialIndex]];
			end;
			
			Dots.set_part_x( 1, Trial_Vis_Loc);
			
		end;
		
		# Tactile
		if TrialType==5 then
			if Locations[TrialIndex]<8  then
				#vibrationLeft_Trial(SlotL, NumCycle, WaitTime);
			elseif Locations[TrialIndex]>8 then
				#vibrationRight_Trial(SlotR, NumCycle, WaitTime);
			end;
		elseif  TrialType==8 then
			if Locations[TrialIndex]<8 then
				#vibrationLeft_Trial(SlotL, NumCycleTarget, WaitTime);
				#wait(1, IntervalTime);
				#vibrationLeft_Trial(SlotL, NumCycleTarget, WaitTime);
			elseif Locations[TrialIndex]>8 then
				#vibrationRight_Trial(SlotR, NumCycleTarget, WaitTime);
				#wait(1, IntervalTime);
				#vibrationRight_Trial(SlotR, NumCycleTarget, WaitTime);
			end;
		end;
		
		
		# Present trial
		if TrialType == 1 then
			AudioOnly_Trial.present();
		elseif TrialType == 2 then
			VisualOnly_Trial.present();
		elseif TrialType == 5 then
			Tactile_Trial.present();
			#startStimulation();
			wait_interval(int(Tactile_Stimulus_Duration));
			#stopStimulation();
			PictureBlueFixationCross.present();
			wait_interval(Post_Stimulus_Duration);
			
		elseif TrialType == 6 then
			AudioOnly_Target.present();	
		elseif TrialType == 7 then
			VisualOnly_Target.present();			
		elseif TrialType == 8 then
			Tactile_Target.present();
			#startStimulation();
			wait_interval(int(Tactile_Stimulus_Duration));
			#stopStimulation();
			PictureBlueFixationCross.present();
			wait_interval(Post_Stimulus_Duration);
		end;
		
		ISI.present();
		
	end;

	# Update counter
	# Check if this is the last trial
	if TrialIndex == TrialList.count() then	
		break;
	end;
	
	# Check if this trial is coming with a target
	TrialIndex = TrialIndex + 1;
	
end;


# FINAL FIXATION
Final_Fixation.present();

#closeStimulator();