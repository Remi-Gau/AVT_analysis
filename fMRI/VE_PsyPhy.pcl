# --------------------------------------------------- #
#					           PCL									#
# --------------------------------------------------- #
string DATE = date_time( "yyyy_mm_dd_hhnn" );

# DISPLAY
double RefreshRate = 60.0;

#Compute the number of pixel per degree
int MaxFOV = 51;  #2.0 * 180.0 * arctan(MonitorWidth/2.0/ViewDist)/ Pi; 
int Win_H = 768 ; 
int Win_W = 1024 ; 
int PPD = Win_W/MaxFOV;

# for ViewDist = 30
# MonWidth	MaxFOV
# 48.0		77
# 37			63
# 29			52
# 21.5		40

# for ViewDist = 50
# MonWidth	MaxFOV
# 48.0		51

# for ViewDist = 60
# MonWidth	MaxFOV
# 33.0		31
# 37			34

# for ViewDist = 160
# MonWidth	MaxFOV
# 39.0		40

# STIMULI & TRIALS
array <int> PresentationLocationsDeg[15]= {-12, -10, -8, -5, -4, -3, -1, 0, 1, 3, 4, 5, 8, 10, 12};


# Visual
array <int> PresentationLocationsPix[0];
loop
int LocationIndex = 1;
until LocationIndex > PresentationLocationsDeg.count()
begin
	PresentationLocationsPix.add( PresentationLocationsDeg[LocationIndex] * PPD);
	LocationIndex = LocationIndex + 1;
end;

# --------------------------------------------------- #
#                USER INPUT REQUIRED                  #
# --------------------------------------------------- #
preset bool DEBUG = false;

preset int Stimulus_Duration = 50;
int Pre_Stimulus_Duration = 500;
int Post_Stimulus_Duration = 250;

Dots_Con.set_duration(Stimulus_Duration);
Dots_Inc.set_duration(Stimulus_Duration);

PostStimFix_Con.set_time(Pre_Stimulus_Duration+Stimulus_Duration);
PostStimFix_Inc.set_time(Pre_Stimulus_Duration+Stimulus_Duration);

PostStimFix_A.set_duration(Post_Stimulus_Duration+Stimulus_Duration);

preset int SubjectNumber;

preset int RunNumber;

RunNumber = 2000 + 100 + RunNumber;


# --------------------------------------------------- #
#                USER INPUT REQUIRED                  #
# --------------------------------------------------- #
string Text2Present = "This is ";

Text2Present.append("a psychophysics run ");

if DEBUG == true then
	Text2Present.append("in DEBUG mode.\n\n");
else
	Text2Present.append("not in DEBUG mode.\n\n");
end;

Text2Present.append("Audiovisual trials \n\n");

if NbPosVE>2 then
	Text2Present.append("Left, Center, Right");
	SourceText.set_caption("Auditory location?\nLEFT / CENTER /  RIGHT");
	SourceText.redraw();
else
	Text2Present.append("Left, Right");
end;

ConfirmationTxt.set_caption(Text2Present);
ConfirmationTxt.redraw();
Confirmation.present();


if DEBUG == true then # Psychophysics run or debug
	Final_Fixation.set_duration(1000);
end;


# --------------------------------------------------- #
#                GETTING TRIALS LIST                  #
# --------------------------------------------------- #
array <int> TrialList[0];
array<int> A_Locations[0];
array<int> V_Locations[0];

if DEBUG == true then
	
	# TRIAL LIST
	
	# Fixation ; TrialType == 0

	# AudioOnly_Trial ; TrialType == 1
	# AudioVisual_Con_Trial ; TrialType == 3
	# AudioVisual_Inc_Trial ; TrialType == 4
	
	TrialList.assign ({1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4});
	
	# LOCATION LIST	
	A_Locations.assign({5, 8, 11, 5, 8, 11, 5, 8, 11, 5, 8, 11, 5, 8, 11, 5, 8, 11});
	V_Locations.assign({5, 5, 5, 11, 11, 11, 5, 5, 5, 11, 11, 11, 5, 5, 5, 11, 11, 11});
	

	#logfile.set_filename("debug.log");
	
else
	# Change directory where to save log files to and to read trial list from
	string SubjectDirectory = "\Subject_";
	SubjectDirectory.append(string(SubjectNumber));
	SubjectDirectory.append("\\");
	logfile_directory.append(SubjectDirectory);

	term.print(logfile_directory);
	term.print("\n");
	
	
	# Set name for file containing the trial list
	string TrialListFileName = logfile_directory;
	TrialListFileName.append("Trial_List_Subject_");
	TrialListFileName.append(string(SubjectNumber));
	TrialListFileName.append("_Run_");
	TrialListFileName.append(string(RunNumber));
	TrialListFileName.append(".txt");
	
	term.print(TrialListFileName);
	term.print("\n");
	
	
	# Set name for file containing the side list
	string SideListFileName = logfile_directory;
	SideListFileName.append("Audio_Side_List_Subject_");
	SideListFileName.append(string(SubjectNumber));
	SideListFileName.append("_Run_");
	SideListFileName.append(string(RunNumber));
	SideListFileName.append(".txt");
	
	term.print(SideListFileName);
	term.print("\n");
	
	
	# Set name for file containing the side list
	string VisualSideListFileName = logfile_directory;
	VisualSideListFileName.append("Visual_Side_List_Subject_");
	VisualSideListFileName.append(string(SubjectNumber));
	VisualSideListFileName.append("_Run_");
	VisualSideListFileName.append(string(RunNumber));
	VisualSideListFileName.append(".txt");
	
	term.print(VisualSideListFileName);
	term.print("\n");
	
	
	# Set name for logfile for this subject and run
	string LogFileName = logfile_directory;
	LogFileName.append("Logfile_Subject_");
	LogFileName.append(string(SubjectNumber));
	LogFileName.append("_Run_");
	LogFileName.append(string(RunNumber));
	LogFileName.append("_");
	LogFileName.append(DATE);
	LogFileName.append(".txt");
	logfile.set_filename(LogFileName);
		
	term.print(LogFileName);
	term.print("\n");
	
	
	
	# Read trial and side list from files
	input_file StimOrderFile = new input_file;
	StimOrderFile.open( TrialListFileName );
	
	input_file SideOrderFile = new input_file;
	SideOrderFile.open( SideListFileName );
	
	input_file VisualSideOrderFile = new input_file;
	VisualSideOrderFile.open( VisualSideListFileName );
	
	bool CouldRead1 = true;
	bool EOF1 = false;
	
	bool CouldRead2 = true;
	bool EOF2 = false;
	
	bool CouldRead3 = true;
	bool EOF3 = false;
	
	loop
		
		int Index=1;
		
		int CurrentTrial1;
		double CurrentTargetParam1;
		string TEMP1;
		
		int CurrentTrial2;
		double CurrentTargetParam2;
		string TEMP2;
		
		int CurrentTrial3;
		double CurrentTargetParam3;
		string TEMP3;
		
	until EOF1==true || EOF2==true || EOF3==true 
	begin
		TEMP1 = StimOrderFile.get_line( );
		TEMP2 = SideOrderFile.get_line( );
		TEMP3 = VisualSideOrderFile.get_line( );
		
		
		CurrentTrial1 = int(double(TEMP1));
		TrialList.add(CurrentTrial1);
		
		CurrentTrial2 = int(double(TEMP2));
		A_Locations.add(CurrentTrial2);
		
		CurrentTrial3 = int(double(TEMP3));
		V_Locations.add(CurrentTrial3);
		
		
		CouldRead1 = StimOrderFile.last_succeeded( );
		EOF1 = StimOrderFile.end_of_file( );
		
		CouldRead2 = SideOrderFile.last_succeeded( );
		EOF2 = SideOrderFile.end_of_file( );
		
		CouldRead3 = SideOrderFile.last_succeeded( );
		EOF3 = VisualSideOrderFile.end_of_file( );
		
		if CouldRead1==false || CouldRead2==false || CouldRead3==false then
			exit( "There was a problem while reading the trial list." );
		end;
		
		Index = Index + 1;
		
	end;
	
	StimOrderFile.close();
	SideOrderFile.close();
	VisualSideOrderFile.close();
	
end;



# ------------------------------------------------------ #
#					           START									#
# ------------------------------------------------------ #
PictureBlueFixationCross.present();

EPI.present();


# ------------------------------------------------------ #
#					          MAIN LOOP 							   #
# ------------------------------------------------------ #
loop 

	int TrialIndex = 1;
	int TrialType;
	
	#  Trial parameters
	int Trial_Vis_Loc;
	int Trial_Aud_Loc;

until TrialIndex > TrialList.count()

begin
	
	# AudioOnly_Trial ; TrialType == 1
	# AudioVisual_Con_Trial ; TrialType == 3
	# AudioVisual_Inc_Trial ; TrialType == 4
	if TrialIndex==TrialList.count()/2 then
		Break.present();
	end;
	
	TrialType = TrialList[TrialIndex];
	
	# TRIAL IS A FIXATION
	if TrialType == 0 then
		
	# TRIAL IS AN ACTUAL EVENT
	else		
		
		# Audio
		if TrialType==1 || TrialType==3 || TrialType==4 then
			# Determine the location of this trial
			Trial_Aud_Loc = A_Locations[TrialIndex]+15*random(0, 9);
			
			# Change the sound
			if TrialType==1 then
				if Stimulus_Duration == 50 then
					SoundOnly.set_stimulus(SOUNDS50[Trial_Aud_Loc]);
				elseif Stimulus_Duration == 80 then
					SoundOnly.set_stimulus(SOUNDS80[Trial_Aud_Loc]);					
				elseif Stimulus_Duration == 100 then
					SoundOnly.set_stimulus(SOUNDS100[Trial_Aud_Loc]);
				else
					SoundOnly.set_stimulus(SOUNDS200[Trial_Aud_Loc]);
				end;
				
			elseif TrialType==3 then
				if Stimulus_Duration == 50 then
					SoundWithDots_Con.set_stimulus(SOUNDS50[Trial_Aud_Loc]);
				elseif Stimulus_Duration == 80 then
					SoundWithDots_Con.set_stimulus(SOUNDS80[Trial_Aud_Loc]);					
				elseif Stimulus_Duration == 100 then
					SoundWithDots_Con.set_stimulus(SOUNDS100[Trial_Aud_Loc]);
				else
					SoundWithDots_Con.set_stimulus(SOUNDS200[Trial_Aud_Loc]);
				end;
				
			elseif TrialType==4 then
				if Stimulus_Duration == 50 then
					SoundWithDots_Inc.set_stimulus(SOUNDS50[Trial_Aud_Loc]);
				elseif Stimulus_Duration == 80 then
					SoundWithDots_Inc.set_stimulus(SOUNDS80[Trial_Aud_Loc]);					
				elseif Stimulus_Duration == 100 then
					SoundWithDots_Inc.set_stimulus(SOUNDS100[Trial_Aud_Loc]);
				else
					SoundWithDots_Inc.set_stimulus(SOUNDS200[Trial_Aud_Loc]);
				end;	
			end;
		end;
		
		# Visual
		if TrialType==3 || TrialType==4 then
			# Determine the location of this trial
			Trial_Vis_Loc = PresentationLocationsPix[V_Locations[TrialIndex]];
			Dots.set_part_x( 1, Trial_Vis_Loc);
		end;
		
		# Present trial
		if TrialType == 1 then
			AudioOnly_Trial.present();
		elseif TrialType == 3 then
			AudioVisual_Con_Trial.present();
		elseif TrialType == 4 then
			AudioVisual_Inc_Trial.present();	
		end;
		
		AuditoryLocation.present();
		
		if TrialType==3 || TrialType==4 then
			wait_interval(50);
			SameDifferent.present();
		end;
			
		ISI.present();
		
	end;

	# Update counter
	# Check if this is the last trial
	if TrialIndex == TrialList.count() then	
		break;
	end;
	
	# Check if this trial is coming with a target
	TrialIndex = TrialIndex + 1;
	
end;


# FINAL FIXATION
Final_Fixation.present();